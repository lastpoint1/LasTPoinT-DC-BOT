const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const { checkPermissions } = require('../utils/permissions');
const config = require('../config.json');
const logger = require('../utils/logger');

// Ban abuse korumasƒ± ayarlarƒ±
const banAbuseSettings = new Map();
const banHistory = new Map(); // userId -> [banTimes]

module.exports = {
    name: 'banprotection',
    description: 'Ban k√∂t√ºye kullanƒ±m korumasƒ±nƒ± y√∂netir',
    data: new SlashCommandBuilder()
        .setName('banprotection')
        .setDescription('Ban k√∂t√ºye kullanƒ±m korumasƒ±nƒ± y√∂netir')
        .addSubcommand(subcommand =>
            subcommand
                .setName('enable')
                .setDescription('Ban abuse korumasƒ±nƒ± etkinle≈ütirir')
                .addIntegerOption(option =>
                    option.setName('ban-limiti')
                        .setDescription('Ka√ß ban atarsa alarm versin (varsayƒ±lan: 3)')
                        .setMinValue(2)
                        .setMaxValue(10)
                        .setRequired(false))
                .addIntegerOption(option =>
                    option.setName('sure')
                        .setDescription('Ka√ß dakika i√ßinde kontrol edilsin (varsayƒ±lan: 3)')
                        .setMinValue(1)
                        .setMaxValue(60)
                        .setRequired(false))
                .addStringOption(option =>
                    option.setName('ceza')
                        .setDescription('Limit a≈üƒ±lƒ±rsa ne yapƒ±lsƒ±n?')
                        .addChoices(
                            { name: 'Uyarƒ± Ver', value: 'warn' },
                            { name: 'Kick At', value: 'kick' },
                            { name: 'Ban Ver', value: 'ban' },
                            { name: 'T√ºm Rolleri Al', value: 'removeall' }
                        )
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('disable')
                .setDescription('Ban abuse korumasƒ±nƒ± devre dƒ±≈üƒ± bƒ±rakƒ±r'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('status')
                .setDescription('Ban abuse korumasƒ± durumunu g√∂sterir'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('history')
                .setDescription('Ban ge√ßmi≈üini g√∂sterir')
                .addUserOption(option =>
                    option.setName('kullanici')
                        .setDescription('Ban ge√ßmi≈üi g√∂r√ºnt√ºlenecek kullanƒ±cƒ±')
                        .setRequired(false)))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(message, args, isSlash = false) {
        try {
            let subcommand, banLimit, timeLimit, punishment, targetUser;
            
            if (isSlash) {
                subcommand = message.options.getSubcommand();
                banLimit = message.options.getInteger('ban-limiti') || 3;
                timeLimit = message.options.getInteger('sure') || 3;
                punishment = message.options.getString('ceza') || 'warn';
                targetUser = message.options.getUser('kullanici');
            } else {
                if (!args[0]) {
                    return message.reply('‚ùå L√ºtfen bir alt komut belirtiniz! Kullanƒ±m: `!banprotection <enable/disable/status/history>`');
                }
                
                subcommand = args[0].toLowerCase();
                banLimit = parseInt(args[1]) || 3;
                timeLimit = parseInt(args[2]) || 3;
                punishment = args[3] || 'warn';
            }

            // Yetki kontrol√º - Sadece sunucu sahibi
            const authorMember = message.guild.members.cache.get(message.author?.id || message.user.id);
            if (authorMember.id !== message.guild.ownerId) {
                return message.reply('‚ùå Bu g√ºvenlik komutu sadece sunucu sahibi tarafƒ±ndan kullanƒ±labilir.');
            }

            const guildId = message.guild.id;
            const replyMethod = isSlash ? 'reply' : 'reply';

            switch (subcommand) {
                case 'enable':
                case 'etkinlestir':
                    banAbuseSettings.set(guildId, {
                        enabled: true,
                        banLimit: banLimit,
                        timeLimit: timeLimit * 60 * 1000, // Dakikayƒ± milisaniyeye √ßevir
                        punishment: punishment
                    });

                    const punishmentText = {
                        'warn': 'Uyarƒ± Verilecek',
                        'kick': 'Sunucudan Atƒ±lacak',
                        'ban': 'Yasaklanacak',
                        'removeall': 'T√ºm Rolleri Alƒ±nacak'
                    };

                    const enableEmbed = new EmbedBuilder()
                        .setColor('#e67e22')
                        .setTitle('üõ°Ô∏è Ban Abuse Korumasƒ± Etkinle≈ütirildi')
                        .addFields(
                            { name: 'Ban Limiti', value: `${banLimit} ban`, inline: true },
                            { name: 'Zaman Sƒ±nƒ±rƒ±', value: `${timeLimit} dakika`, inline: true },
                            { name: 'Ceza', value: punishmentText[punishment], inline: true }
                        )
                        .setDescription(`Bir moderat√∂r ${timeLimit} dakika i√ßinde ${banLimit} ki≈üiyi banlarsa ${punishmentText[punishment].toLowerCase()}.`)
                        .setTimestamp();

                    await message[replyMethod]({ embeds: [enableEmbed] });
                    logger.info(`${authorMember.user.tag} tarafƒ±ndan ban abuse korumasƒ± etkinle≈ütirildi. ${banLimit} ban / ${timeLimit} dakika`);
                    break;

                case 'disable':
                case 'devredisinibrak':
                    if (!banAbuseSettings.has(guildId)) {
                        return message[replyMethod]('‚ùå Ban abuse korumasƒ± zaten devre dƒ±≈üƒ±!');
                    }

                    banAbuseSettings.delete(guildId);

                    const disableEmbed = new EmbedBuilder()
                        .setColor('#95a5a6')
                        .setTitle('üõ°Ô∏è Ban Abuse Korumasƒ± Devre Dƒ±≈üƒ± Bƒ±rakƒ±ldƒ±')
                        .setDescription('Ban abuse korumasƒ± artƒ±k devre dƒ±≈üƒ±.')
                        .setTimestamp();

                    await message[replyMethod]({ embeds: [disableEmbed] });
                    logger.info(`${authorMember.user.tag} tarafƒ±ndan ban abuse korumasƒ± devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±.`);
                    break;

                case 'status':
                case 'durum':
                    const settings = banAbuseSettings.get(guildId);
                    
                    if (!settings || !settings.enabled) {
                        const statusEmbed = new EmbedBuilder()
                            .setColor('#95a5a6')
                            .setTitle('üõ°Ô∏è Ban Abuse Korumasƒ± Durumu')
                            .setDescription('‚ùå **Devre Dƒ±≈üƒ±**')
                            .setTimestamp();

                        return message[replyMethod]({ embeds: [statusEmbed] });
                    }

                    const punishmentTextStatus = {
                        'warn': 'Uyarƒ± Verilecek',
                        'kick': 'Sunucudan Atƒ±lacak',
                        'ban': 'Yasaklanacak',
                        'removeall': 'T√ºm Rolleri Alƒ±nacak'
                    };

                    const activeEmbed = new EmbedBuilder()
                        .setColor('#e67e22')
                        .setTitle('üõ°Ô∏è Ban Abuse Korumasƒ± Durumu')
                        .setDescription('‚úÖ **Aktif ve √áalƒ±≈üƒ±yor**')
                        .addFields(
                            { name: 'Ban Limiti', value: `${settings.banLimit} ban`, inline: true },
                            { name: 'Zaman Sƒ±nƒ±rƒ±', value: `${settings.timeLimit / 60000} dakika`, inline: true },
                            { name: 'Ceza T√ºr√º', value: punishmentTextStatus[settings.punishment], inline: true }
                        )
                        .setTimestamp();

                    await message[replyMethod]({ embeds: [activeEmbed] });
                    break;

                case 'history':
                case 'gecmis':
                    const userId = targetUser ? targetUser.id : (message.author?.id || message.user.id);
                    const userBanHistory = banHistory.get(`${guildId}_${userId}`) || [];
                    
                    const historyEmbed = new EmbedBuilder()
                        .setColor('#3498db')
                        .setTitle('üìä Ban Ge√ßmi≈üi')
                        .setDescription(targetUser ? `**${targetUser.tag}** kullanƒ±cƒ±sƒ±nƒ±n ban ge√ßmi≈üi:` : 'Sizin ban ge√ßmi≈üiniz:');

                    if (userBanHistory.length === 0) {
                        historyEmbed.addFields({ name: 'Ge√ßmi≈ü', value: 'Hen√ºz hi√ß ban i≈ülemi yapƒ±lmamƒ±≈ü.', inline: false });
                    } else {
                        const recentBans = userBanHistory.slice(-10); // Son 10 ban
                        const banList = recentBans.map((banTime, index) => {
                            const date = new Date(banTime);
                            return `${index + 1}. ${date.toLocaleString('tr-TR')}`;
                        }).join('\n');

                        historyEmbed.addFields(
                            { name: 'Toplam Ban Sayƒ±sƒ±', value: userBanHistory.length.toString(), inline: true },
                            { name: 'Son 10 Ban', value: banList || 'Veri yok', inline: false }
                        );
                    }

                    historyEmbed.setTimestamp();
                    await message[replyMethod]({ embeds: [historyEmbed] });
                    break;

                default:
                    return message[replyMethod]('‚ùå Ge√ßersiz alt komut! Kullanƒ±m: `!banprotection <enable/disable/status/history>`');
            }

        } catch (error) {
            logger.error('Ban protection komutu hatasƒ±:', error);
            const replyMethod = isSlash ? 'reply' : 'reply';
            await message[replyMethod]('‚ùå Ban korumasƒ± komutu √ßalƒ±≈ütƒ±rƒ±lƒ±rken bir hata olu≈ütu!');
        }
    }
};

/**
 * Ban abuse kontrol√º - ban komutunda kullanƒ±lacak
 */
async function trackBanUsage(guild, moderatorId, targetUserId) {
    const guildId = guild.id;
    const settings = banAbuseSettings.get(guildId);
    
    if (!settings || !settings.enabled) {
        return { violated: false };
    }

    // Sunucu sahibi muaf
    if (moderatorId === guild.ownerId) {
        return { violated: false };
    }

    const historyKey = `${guildId}_${moderatorId}`;
    const now = Date.now();
    
    // Mevcut ban ge√ßmi≈üini al
    let userBanHistory = banHistory.get(historyKey) || [];
    
    // Yeni ban'ƒ± ekle
    userBanHistory.push(now);
    
    // Zaman sƒ±nƒ±rƒ± dƒ±≈üƒ±ndaki ban'larƒ± temizle
    userBanHistory = userBanHistory.filter(banTime => 
        now - banTime <= settings.timeLimit
    );
    
    // G√ºncellenmi≈ü ge√ßmi≈üi kaydet
    banHistory.set(historyKey, userBanHistory);
    
    // Limit kontrol et
    if (userBanHistory.length >= settings.banLimit) {
        logger.warn(`BAN ABUSE TESPƒ∞T EDƒ∞LDƒ∞: ${moderatorId} kullanƒ±cƒ±sƒ± ${settings.timeLimit/60000} dakika i√ßinde ${userBanHistory.length} ban attƒ±!`);
        
        return {
            violated: true,
            banCount: userBanHistory.length,
            timeWindow: settings.timeLimit / 60000,
            punishment: settings.punishment
        };
    }
    
    return { violated: false, banCount: userBanHistory.length };
}

/**
 * Ban abuse cezasƒ± uygula
 */
async function applyBanAbusePunishment(guild, moderatorId, punishment) {
    try {
        const moderator = await guild.members.fetch(moderatorId);
        if (!moderator) return false;

        // Log kanalƒ±nƒ± bul
        const logChannel = guild.channels.cache.find(ch => 
            ch.name === config.logChannelName && ch.isTextBased()
        );

        const alertEmbed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('üö® BAN ABUSE TESPƒ∞T EDƒ∞LDƒ∞!')
            .setDescription(`**${moderator.user.tag}** kƒ±sa s√ºrede √ßok fazla ban attƒ±!`)
            .addFields(
                { name: 'Moderat√∂r', value: `${moderator.user.tag} (<@${moderator.id}>)`, inline: false }
            )
            .setTimestamp();

        switch (punishment) {
            case 'warn':
                alertEmbed.addFields({ name: 'Uygulanan Ceza', value: '‚ö†Ô∏è Uyarƒ± verildi', inline: true });
                if (logChannel) {
                    await logChannel.send({ embeds: [alertEmbed] });
                }
                break;

            case 'kick':
                if (moderator.kickable) {
                    await moderator.kick('Ban abuse - √áok fazla ban attƒ±');
                    alertEmbed.addFields({ name: 'Uygulanan Ceza', value: 'üë¢ Sunucudan atƒ±ldƒ±', inline: true });
                } else {
                    alertEmbed.addFields({ name: 'Ceza Durumu', value: '‚ùå Atƒ±lamadƒ± - yetki yetersiz', inline: true });
                }
                if (logChannel) {
                    await logChannel.send({ embeds: [alertEmbed] });
                }
                break;

            case 'ban':
                if (moderator.bannable) {
                    await moderator.ban({ reason: 'Ban abuse - √áok fazla ban attƒ±' });
                    alertEmbed.addFields({ name: 'Uygulanan Ceza', value: 'üî® Yasaklandƒ±', inline: true });
                } else {
                    alertEmbed.addFields({ name: 'Ceza Durumu', value: '‚ùå Yasaklanamadƒ± - yetki yetersiz', inline: true });
                }
                if (logChannel) {
                    await logChannel.send({ embeds: [alertEmbed] });
                }
                break;

            case 'removeall':
                // T√ºm rolleri al (@everyone hari√ß)
                const allUserRoles = moderator.roles.cache.filter(role => role.id !== guild.id);
                let allRemovedRoles = [];
                
                for (const role of allUserRoles.values()) {
                    try {
                        await moderator.roles.remove(role);
                        allRemovedRoles.push(role.name);
                    } catch (error) {
                        logger.warn(`Rol kaldƒ±rƒ±lamadƒ±: ${role.name} - ${error.message}`);
                    }
                }
                
                const allRolesText = allRemovedRoles.length > 0 ? `${allRemovedRoles.length} rol kaldƒ±rƒ±ldƒ±` : 'Hi√ßbiri';
                alertEmbed.addFields({ name: 'Uygulanan Ceza', value: `üóëÔ∏è T√ºm roller alƒ±ndƒ±: ${allRolesText}`, inline: true });
                if (logChannel) {
                    await logChannel.send({ embeds: [alertEmbed] });
                }
                break;
        }

        logger.info(`Ban abuse cezasƒ± uygulandƒ±: ${moderator.user.tag} -> ${punishment}`);
        return true;

    } catch (error) {
        logger.error('Ban abuse ceza uygulama hatasƒ±:', error);
        return false;
    }
}

module.exports.banAbuseSettings = banAbuseSettings;
module.exports.banHistory = banHistory;
module.exports.trackBanUsage = trackBanUsage;
module.exports.applyBanAbusePunishment = applyBanAbusePunishment;